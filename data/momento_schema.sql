-- MySQL Script generated by MySQL Workbench
-- Ср 28 июн 2017 15:31:33
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema momento
-- -----------------------------------------------------
-- База данных блога Momento (TM)
DROP SCHEMA IF EXISTS `momento` ;

-- -----------------------------------------------------
-- Schema momento
--
-- База данных блога Momento (TM)
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `momento` DEFAULT CHARACTER SET utf8 ;
USE `momento` ;

-- -----------------------------------------------------
-- Table `momento`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`users` ;

CREATE TABLE IF NOT EXISTS `momento`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `nickname` VARCHAR(20) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `phone_number` VARCHAR(50) NULL,
  `about` VARCHAR(250) NULL,
  `age` TINYINT(3) NULL,
  `is_online` TINYINT NOT NULL DEFAULT 0,
  `gender` TINYINT NOT NULL COMMENT 'Male is 0\nFemale is 1',
  `language` VARCHAR(100) NOT NULL,
  `num_posts` INT NOT NULL DEFAULT 0,
  `avatar` VARCHAR(100) NULL,
  `account_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `nickname_UNIQUE` (`nickname` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `phone_number_UNIQUE` (`phone_number` ASC),
  UNIQUE INDEX `account_id_UNIQUE` (`account_id` ASC))
ENGINE = InnoDB
COMMENT = 'Пользователи блога. Аккаунты. Данные авторизации, аутентификации будут в таблице accounts.';


-- -----------------------------------------------------
-- Table `momento`.`passwords`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`passwords` ;

CREATE TABLE IF NOT EXISTS `momento`.`passwords` (
  `password` VARCHAR(255) NOT NULL,
  UNIQUE INDEX `password_UNIQUE` (`password` ASC))
ENGINE = InnoDB
COMMENT = 'Аккаунты пользователей. email и password';


-- -----------------------------------------------------
-- Table `momento`.`posts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`posts` ;

CREATE TABLE IF NOT EXISTS `momento`.`posts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(50) NOT NULL,
  `text` LONGTEXT NOT NULL,
  `creation_date` DATE NOT NULL,
  `author_id` INT NOT NULL,
  `num_views` INT NOT NULL DEFAULT 0,
  `next_id` INT NULL DEFAULT NULL,
  `prev_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  UNIQUE INDEX `next_id_UNIQUE` (`next_id` ASC),
  UNIQUE INDEX `prev_id_UNIQUE` (`prev_id` ASC))
ENGINE = InnoDB
COMMENT = 'Хранит все записи в богах';


-- -----------------------------------------------------
-- Table `momento`.`categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`categories` ;

CREATE TABLE IF NOT EXISTS `momento`.`categories` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) NOT NULL,
  `num_posts` INT NOT NULL DEFAULT 0,
  `popularity` TINYINT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB
COMMENT = 'Категории постов. Можно добавлять. Один пост может быть в нескольких категориях (максимум 5).';


-- -----------------------------------------------------
-- Table `momento`.`posts_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`posts_categories` ;

CREATE TABLE IF NOT EXISTS `momento`.`posts_categories` (
  `post_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  INDEX `fk_posts_categories_2_idx` (`category_id` ASC),
  PRIMARY KEY (`post_id`, `category_id`),
  CONSTRAINT `fk_posts_categories_1`
    FOREIGN KEY (`post_id`)
    REFERENCES `momento`.`posts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_posts_categories_2`
    FOREIGN KEY (`category_id`)
    REFERENCES `momento`.`categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Категории конкретных постов.';


-- -----------------------------------------------------
-- Table `momento`.`comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`comments` ;

CREATE TABLE IF NOT EXISTS `momento`.`comments` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `parent_id` INT NOT NULL,
  `is_answer` TINYINT NOT NULL COMMENT 'Если 1, то данный комментарий является ответом уже существующему комментарию \nи будет отображен в древовидной структуре соответствующим образом.',
  `text` VARCHAR(200) NOT NULL,
  `author_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC),
  INDEX `fk_comments_1_idx` (`author_id` ASC),
  INDEX `fk_comments_2_idx` (`parent_id` ASC),
  CONSTRAINT `fk_comments_1`
    FOREIGN KEY (`author_id`)
    REFERENCES `momento`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_comments_2`
    FOREIGN KEY (`parent_id`)
    REFERENCES `momento`.`posts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Комментарии пользователей к постам других пользователей. Может быть помечен как ответ на комментарий другого';


-- -----------------------------------------------------
-- Table `momento`.`likes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`likes` ;

CREATE TABLE IF NOT EXISTS `momento`.`likes` (
  `post_id` INT NOT NULL COMMENT 'Или комментарий или пост',
  `is_comment` VARCHAR(45) NOT NULL COMMENT 'Если лайк комментарию',
  `author_id` INT NOT NULL,
  PRIMARY KEY (`post_id`, `author_id`, `is_comment`),
  INDEX `fk_likes_1_idx` (`author_id` ASC),
  CONSTRAINT `fk_likes_1`
    FOREIGN KEY (`author_id`)
    REFERENCES `momento`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_likes_2`
    FOREIGN KEY (`post_id`)
    REFERENCES `momento`.`posts` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `momento`.`users_categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`users_categories` ;

CREATE TABLE IF NOT EXISTS `momento`.`users_categories` (
  `user_id` INT NOT NULL,
  `category_id` INT NOT NULL,
  INDEX `fk_users_categories_1_idx` (`user_id` ASC),
  INDEX `fk_users_categories_2_idx` (`category_id` ASC),
  CONSTRAINT `fk_users_categories_1`
    FOREIGN KEY (`user_id`)
    REFERENCES `momento`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_users_categories_2`
    FOREIGN KEY (`category_id`)
    REFERENCES `momento`.`categories` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `momento`.`subscribers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`subscribers` ;

CREATE TABLE IF NOT EXISTS `momento`.`subscribers` (
  `publisher_id` INT NOT NULL,
  `subscriber_id` INT NOT NULL,
  INDEX `index1` (`publisher_id` ASC, `subscriber_id` ASC),
  PRIMARY KEY (`publisher_id`, `subscriber_id`),
  INDEX `fk_subscribers_2_idx` (`subscriber_id` ASC),
  CONSTRAINT `fk_subscribers_1`
    FOREIGN KEY (`publisher_id`)
    REFERENCES `momento`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_subscribers_2`
    FOREIGN KEY (`subscriber_id`)
    REFERENCES `momento`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `momento`.`accounts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `momento`.`accounts` ;

CREATE TABLE IF NOT EXISTS `momento`.`accounts` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `salt` VARCHAR(25) NOT NULL,
  `level` TINYINT NOT NULL DEFAULT 10,
  `is_approved` TINYINT NOT NULL DEFAULT 0,
  `registration_date` DATE NOT NULL,
  `last_seen_date` DATE NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `salt_UNIQUE` (`salt` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC))
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
